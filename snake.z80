;Variables
TEMP_H	EQU 4000H
TEMP_L	EQU	4001H

PRESSED_KEY	EQU 4002H
KEY_CODE EQU 4003H

SNAKE_SIZE EQU 4005H
SNAKE_DIRECTION 	EQU 4006H
SNAKE_AUX1	EQU 4007H
SNAKE_AUX2 EQU 4008H

RAND_POINTER EQU 4009H
FOOD_EATEN EQU 400AH
FOOD_L	EQU 400BH
FOOD_H EQU 400CH

SNAKE_HEAD EQU 40A0H

;Constants
SCREEN_MEMORY	EQU	8000h
KEYBOARD	EQU 01H
	org 0000h
INIT:
;Initialization
	EI				;Enable interrupt
	IM 1			;Interrupt mode 1
	LD SP, 4FFFh	;Stack position
	JP GAME_INIT

;Keyboard interrupt handler
	org 0038h
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	LD C, KEYBOARD
	IN A, (C)
	LD (KEY_CODE), A
	LD A, 01H
	LD (PRESSED_KEY), A
	
	POP DE
	POP BC
	POP HL
	POP AF
	EI
	RET

GAME_INIT:
	CALL CLEAR_SCREEN
	CALL DRAW_BORDER
	CALL DRAW_AUTHORS
	CALL DRAW_TITLE
	CALL DRAW_PRESS_KEY
	
	LD A, 00H
	LD (PRESSED_KEY), A
	LD (KEY_CODE), A
	LD (RAND_POINTER), A

PRESS_KEY_WAIT_LOOP:
	LD A, (PRESSED_KEY)
	LD B, A
	LD A, 00H
	LD (PRESSED_KEY), A
	LD A,B 
	DEC A
	JR NZ, PRESS_KEY_WAIT_LOOP

GAME_START:	
	CALL CLEAR_SCREEN
	CALL DRAW_BORDER
	
	;Snake start
	LD B, 0AH
	LD A, B
	LD (SNAKE_SIZE), A
	LD A, 01H
	LD (SNAKE_DIRECTION), A
	
	LD HL, SCREEN_MEMORY + (80 * 12) + 38
	LD C, L
	LD D, H
	LD HL, SNAKE_HEAD

SNAKE_INIT:	
	LD (HL), C
	INC HL
	LD (HL), D
	INC HL
	
	INC C
	LD A, D
	ADC A, 00H
	LD D, A
	DJNZ SNAKE_INIT
	
	CALL CREATE_FOOD
GAME_LOOP:
	CALL CHANGE_DIR
	CALL MOVE_SNAKE
	CALL DRAW_SNAKE
	CALL DELAY
	
	JP GAME_LOOP
	
CHECK_EATEN:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	LD HL, SNAKE_HEAD
	LD E, (HL)
	INC HL
	LD D, (HL)
	
	LD A, (FOOD_L)
	LD L, A
	LD A, (FOOD_H)
	LD H, A
	
	OR A
	SBC HL, DE
	JR Z, HALTS
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
HALTS:
	HALT
	

CREATE_FOOD:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
CF_START:
	LD A, (RAND_POINTER)
	LD B, A
	LD HL, RAND_NUMBERS
	LD A, L
	ADD B
	LD L, A
	LD A, H
	ADC 00H
	LD H, A
	
	LD E, (HL)
	INC HL
	LD D, (HL)
	INC B
	INC B
	LD A, B 
	LD (RAND_POINTER), A
	
	;Check so we dont create food inside the snake
	
	LD HL, SNAKE_HEAD
	LD A, (SNAKE_SIZE)
	LD B,A 
	DEC B
CF_LOOP
	PUSH BC
	LD C, (HL)
	INC HL
	LD B, (HL)
	INC HL
	PUSH HL
	LD HL, BC
	
	OR A
	SBC HL, DE
	JR Z, CF_START
	POP HL
	POP BC
	DJNZ CF_LOOP
	
	EX HL, DE
	LD (HL), '*'
	
	LD A, L
	LD (FOOD_L), A
	LD A, H
	LD (FOOD_H), A
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
	
SNAKE_COLLISION:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	;Border collision
	;Top
	LD HL, SNAKE_HEAD
	LD E, (HL)
	INC HL
	LD D, (HL)
	LD HL, SCREEN_MEMORY + (80 * 24)
	
	OR A
	SBC HL, DE
	JR C, SC_HALT

	;Bottom
	LD HL, SCREEN_MEMORY + 80
	PUSH DE
	EX HL, DE
	
	OR A
	SBC HL, DE
	JR C, SC_HALT
	
	POP DE
	;Left
	LD HL, SCREEN_MEMORY
	LD B, 24

SC_L_LOOP	
	PUSH HL
	OR A
	SBC HL, DE
	JR Z, SC_HALT
	POP HL
	LD A, L
	ADD 80
	LD L, A
	LD A, H
	ADC 00H
	LD H, A
	DJNZ SC_L_LOOP
	
	;Right
	LD HL, SCREEN_MEMORY+79
	LD B, 24

SC_R_LOOP	
	PUSH HL
	OR A
	SBC HL, DE
	JR Z, SC_HALT
	POP HL
	LD A, L
	ADD 80
	LD L, A
	LD A, H
	ADC 00H
	LD H, A
	DJNZ SC_R_LOOP
	;Snake
	
	LD HL, SNAKE_HEAD
	LD A, (SNAKE_SIZE)
	LD B,A 
	DEC B
	INC HL
	INC HL
SC_S_LOOP
	PUSH BC
	LD C, (HL)
	INC HL
	LD B, (HL)
	INC HL
	PUSH HL
	LD HL, BC
	
	OR A
	SBC HL, DE
	JR Z, SC_HALT
	POP HL
	POP BC
	DJNZ SC_S_LOOP
	
	
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
SC_HALT:
	HALT
	JP INIT
	
	
CHANGE_DIR:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	LD A, (KEY_CODE)
	CP 1CH
	JR Z, CD_L
	CP 1DH
	JR Z, CD_T
	CP 23H
	JR Z, CD_R
	CP 1BH
	JR Z, CD_B
	JP CD_END

CD_L:
	LD A, 00H
	LD (SNAKE_DIRECTION), A
	JP CD_END

CD_T:
	LD A, 01H
	LD (SNAKE_DIRECTION), A
	JP CD_END
	
CD_R:
	LD A, 02H
	LD (SNAKE_DIRECTION), A
	JP CD_END
	
CD_B:
	LD A, 03H
	LD (SNAKE_DIRECTION), A
	JP CD_END
	
	
CD_END:	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
	
DELAY:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	LD D, 08H
DELAY_LOOP3:	
	LD C, 0FFH
DELAY_LOOP2:	
	LD B, 0FFH
DELAY_LOOP1:
	DJNZ DELAY_LOOP1
	DEC C
	LD B, C
	DJNZ DELAY_LOOP2
	DEC D
	LD B, D
	DJNZ DELAY_LOOP3
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET

MOVE_SNAKE:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	LD HL, SNAKE_HEAD
	LD A, (SNAKE_SIZE)
	LD B, A
	DEC B
	LD A, (SNAKE_DIRECTION)
	
	CP 00H
	JP Z, MOVE_SNAKE_LEFT
	CP 01H
	JP Z, MOVE_SNAKE_TOP
	CP 02H
	JP Z, MOVE_SNAKE_RIGHT
	CP 03H
	JP Z, MOVE_SNAKE_BOTTOM
	
MOVE_SNAKE_LEFT:
	LD E, (HL)
	INC HL
	LD D, (HL)
	
	LD A, E
	LD (SNAKE_AUX1), A
	LD A, D
	LD (SNAKE_AUX2), A
	
	DEC E
	LD A, D
	SBC A, 00H
	LD D, A
	
	DEC HL
	LD (HL), E
	INC HL
	LD (HL), D
	INC HL
	
MSL_LOOP:
	LD E, (HL)
	LD A, (SNAKE_AUX1)
	LD (HL), A
	LD A, E
	LD (SNAKE_AUX1), A
	
	INC HL
	LD D, (HL)
	LD A, (SNAKE_AUX2)
	LD (HL), A
	LD A, D
	LD (SNAKE_AUX2), A
	INC HL

	DJNZ MSL_LOOP
	JP MOVE_SNAKE_END
	
MOVE_SNAKE_RIGHT:
	LD E, (HL)
	INC HL
	LD D, (HL)
	
	LD A, E
	LD (SNAKE_AUX1), A
	LD A, D
	LD (SNAKE_AUX2), A
	
	INC E
	LD A, D
	ADC A, 00H
	LD D, A
	
	DEC HL
	LD (HL), E
	INC HL
	LD (HL), D
	INC HL
	
MSR_LOOP:
	LD E, (HL)
	LD A, (SNAKE_AUX1)
	LD (HL), A
	LD A, E
	LD (SNAKE_AUX1), A
	
	INC HL
	LD D, (HL)
	LD A, (SNAKE_AUX2)
	LD (HL), A
	LD A, D
	LD (SNAKE_AUX2), A
	INC HL

	DJNZ MSR_LOOP
	JP MOVE_SNAKE_END
	
MOVE_SNAKE_TOP:
	LD E, (HL)
	INC HL
	LD D, (HL)
	
	LD A, E
	LD (SNAKE_AUX1), A
	LD A, D
	LD (SNAKE_AUX2), A
	
	LD A, E
	SUB 80
	LD E, A
	LD A, D
	SBC A, 00H
	LD D, A
	
	DEC HL
	LD (HL), E
	INC HL
	LD (HL), D
	INC HL
	
MST_LOOP:
	LD E, (HL)
	LD A, (SNAKE_AUX1)
	LD (HL), A
	LD A, E
	LD (SNAKE_AUX1), A
	
	INC HL
	LD D, (HL)
	LD A, (SNAKE_AUX2)
	LD (HL), A
	LD A, D
	LD (SNAKE_AUX2), A
	INC HL

	DJNZ MST_LOOP
	JP MOVE_SNAKE_END
	
MOVE_SNAKE_BOTTOM:
	LD E, (HL)
	INC HL
	LD D, (HL)
	
	LD A, E
	LD (SNAKE_AUX1), A
	LD A, D
	LD (SNAKE_AUX2), A
	
	LD A, E
	ADD A, 80
	LD E, A
	LD A, D
	ADC A, 00H
	LD D, A
	
	DEC HL
	LD (HL), E
	INC HL
	LD (HL), D
	INC HL
	
MSB_LOOP:
	LD E, (HL)
	LD A, (SNAKE_AUX1)
	LD (HL), A
	LD A, E
	LD (SNAKE_AUX1), A
	
	INC HL
	LD D, (HL)
	LD A, (SNAKE_AUX2)
	LD (HL), A
	LD A, D
	LD (SNAKE_AUX2), A
	INC HL

	DJNZ MSB_LOOP
	JP MOVE_SNAKE_END
	
MOVE_SNAKE_END:
	CALL SNAKE_COLLISION
	CALL CHECK_EATEN
	JR Z, MS_GROW
	LD L, E
	LD H, D
	LD (HL), 00H
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
	
MS_GROW:
	DEC HL
	DEC HL
	LD A, (SNAKE_AUX1)
	LD (HL), A
	INC HL
	LD A, (SNAKE_AUX2)
	LD (HL), A
	LD A, (SNAKE_SIZE)
	INC A
	LD (SNAKE_SIZE), A
	CALL CREATE_FOOD
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
	
DRAW_SNAKE:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	LD A, (SNAKE_SIZE)
	LD B, A
	LD HL, SNAKE_HEAD

DS_LOOP:	
	LD C, (HL)
	INC HL
	LD D, (HL)
	INC HL
	
	PUSH HL
	LD L, C
	LD H, D
	LD (HL), 0DBh
	POP HL
	DJNZ DS_LOOP
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
	
DRAW_PRESS_KEY:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	;Draw Press Key Text
	LD HL, PRESS_KEY_TEXT
	LD B, 00h
DPK_DRAW_LOOP:
	LD A, (HL)
	CP 00h
	JR Z, DPK_DRAW_FINISHED
	LD D, A
	PUSH HL
	LD HL, SCREEN_MEMORY + (15 * 80) + 27
	LD A, L
	ADD A, B
	LD L, A
	LD A, H
	ADC A, 00h
	LD H, A
	LD (HL), D
	POP HL
	INC HL
	INC B
	JP DPK_DRAW_LOOP
DPK_DRAW_FINISHED:
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
	
	
DRAW_TITLE:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	LD HL, SCREEN_MEMORY + (80 * 4) + 14
	LD A, L
	LD (TEMP_L), A
	LD A, H
	LD (TEMP_H), A
	LD HL, TITLE
	LD B,10
	LD C, 0

DT_LOOP:
	LD D, (HL)
	PUSH HL
	LD A, (TEMP_L)
	ADD A, C
	LD L, A
	LD A, (TEMP_H)
	ADC A, 00h
	LD H, A
	LD (HL), D
	POP HL
	INC HL
	INC C
	LD A, 53
	CP C
	JR NZ, DT_LOOP
	
	LD C, 00h
	LD A, (TEMP_L)
	ADD A, 80
	LD (TEMP_L), A
	LD A, (TEMP_H)
	ADC A, 00h
	LD (TEMP_H), A
	DJNZ DT_LOOP
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
	
DRAW_AUTHORS:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	;Draw Bruno's Name
	LD HL, BRUNO_NAME
	LD B, 00h
DA_B_DRAW_LOOP:
	LD A, (HL)
	CP 00h
	JR Z, DA_B_DRAW_FINISHED
	LD D, A
	PUSH HL
	LD HL, SCREEN_MEMORY + (23 * 80) + 1
	LD A, L
	ADD A, B
	LD L, A
	LD A, H
	ADC A, 00h
	LD H, A
	LD (HL), D
	POP HL
	INC HL
	INC B
	JP DA_B_DRAW_LOOP
DA_B_DRAW_FINISHED:

	;Draw Terumi's Name
	LD HL, TERUMI_NAME
	LD B, 00h
DA_T_DRAW_LOOP:
	LD A, (HL)
	CP 00h
	JR Z, DA_T_DRAW_FINISHED
	LD D, A
	PUSH HL
	LD HL, SCREEN_MEMORY + (23 * 80) + 61
	LD A, L
	ADD A, B
	LD L, A
	LD A, H
	ADC A, 00h
	LD H, A
	LD (HL), D
	POP HL
	INC HL
	INC B
	JP DA_T_DRAW_LOOP
DA_T_DRAW_FINISHED:
	
	
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
	
DRAW_BORDER:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	;TOP BORDER
	LD HL, SCREEN_MEMORY
	LD A, 0DBh
	LD B, 80
DB_TOP_LOOP:
	LD (HL), A
	INC HL
	DJNZ DB_TOP_LOOP
	
	;BOTTOM BORDER
	LD HL, SCREEN_MEMORY + (24 * 80)
	LD A, 0DBh
	LD B, 80
DB_BOTTOM_LOOP:
	LD (HL), A
	INC HL
	DJNZ DB_BOTTOM_LOOP
	
	;LEFT BORDER
	LD HL, SCREEN_MEMORY
	LD B, 24
DB_LEFT_LOOP:
	LD A, 0DBh
	LD (HL), A
	LD A, L
	ADD A, 80
	LD L, A
	LD A, H
	ADC A, 00h
	LD H, A
	DJNZ DB_LEFT_LOOP
	
	;RIGHT BORDER
	LD HL, SCREEN_MEMORY + 79
	LD B, 24
DB_RIGHT_LOOP:
	LD A, 0DBh
	LD (HL), A
	LD A, L
	ADD A, 80
	LD L, A
	LD A, H
	ADC A, 00h
	LD H, A
	DJNZ DB_RIGHT_LOOP
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET

CLEAR_SCREEN:
	PUSH AF
	PUSH HL
	PUSH BC
	PUSH DE
	
	LD B, 200
	LD C, 10
	LD HL, SCREEN_MEMORY
	
CS_C_LOOP:
		LD A, 00h
CS_B_LOOP:
			LD (HL), A
			INC HL
			DJNZ CS_B_LOOP
		LD B, 200
		DEC C
		LD A, 00h
		CP C
		JR NZ, CS_C_LOOP
	
	POP DE
	POP BC
	POP HL
	POP AF
	RET
	
	
BRUNO_NAME:	DB "BRUNO CLEMENTE"
	NOP
TERUMI_NAME: DB "RUBIA TERUMI ISOBE"
	NOP
PRESS_KEY_TEXT: DB "PRESS ANY KEY TO CONTINUE"
	NOP
	
RAND_NUMBERS: DB 82bah, 828ch, 80a4h, 858eh, 873dh, 8447h, 8457h, 86f6h, 8335h, 80ebh, 85a1h, 84a6h, 8403h, 8141h, 8734h, 8648h, 8734h, 866ch, 873ah, 8497h, 848bh, 80d7h, 84f6h, 85b6h, 84cah, 81a5h, 8667h, 8153h, 825eh, 85ech, 8532h, 8362h, 85eah, 8619h, 80f4h, 8510h, 82adh, 81e3h, 8265h, 86e1h, 8436h, 81cah, 85c6h, 81f5h, 84beh, 8211h, 811eh, 845ch, 83a8h, 80beh

TITLE: DB 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 020h, 0DBh, 0DBh, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 020h, 020h, 020h, 020h, 0DBh, 0DBh, 0DBh, 0DBh, 0DBh, 020h


